#!/usr/bin/env node

var config = require('./app/lib/config');
var log = require('./app/lib/log');
var spawnSync = require('child_process').spawnSync;
var spawn = require('child_process').spawn;
var prettyHrtime = require('pretty-hrtime');
var fs = require('fs');


var KEEPALIVE_DELAY = 2000;




/*

	== Server Backend ==

	Primary launch script for the application.

	NOTE: Allthough most of the build utilities that are being used
		have node modules that could be consumed here, we want to keep 
		the abiltiy to run the various steps directly from outside this 
		manager.  For example, `gulp` keeps its external config 
		files and can be launched directly.  This is mainly because it's 
		simpler to debug the various steps that way.  We use `child_process`
		here to run them exactly as they would be from the command line.

*/





var argv = require('yargs')

	.usage       ('Usage: server-backend [options]')

	.boolean     ('s')
	.alias       ('s', 'start')
	.describe    ('s', 'Start the server')

	.boolean     ('b')
	.alias       ('b', 'build')
	.describe    ('b', 'Build dependencies')

	.boolean     ('w')
	.alias       ('w', 'watch')
	.describe    ('w', 'Turn on watch mode')

	.boolean     ('k')
	.alias       ('k', 'keepAlive')
	.describe    ('k', 'Automatically restart the server when it crashes')

	.help        ('h')
	.alias       ('h', 'help')
	.describe    ('h', 'Show this help message')

	.example     ('server-backend -dsb', 'Start server in debug mode and build dependencies')
	.example     ('server-backend -s', 'Start the server')

	.argv;



if (!process.env.NODE_ENV) {
	log.error('NODE_ENV not set, exiting');
	log.debug('Recommended: Add "export NODE_ENV=development" to your ./bash_profile')
	process.exit();
}


if (config.get('LOG_OUTPUT_ENABLED')) {
	if (!fs.existsSync(config.get('LOG_OUTPUT_DIRECTORY'))){
		fs.mkdirSync(config.get('LOG_OUTPUT_DIRECTORY'));
	}
}


if (argv.build) {
	log.info('Beginning build')
	var buildBegin = process.hrtime();
	if (config.get('DASHBOARD_ENABLED')) {
		runSync('gulp compile-dashboard');
	}
	var buildEnd = process.hrtime(buildBegin);
	log.info('Build completed in ' + prettyHrtime(buildEnd))
}

if (argv.watch) {
	if (config.get('DASHBOARD_ENABLED')) {
		run('gulp watch-dashboard')
	}
}

if (argv.start) {
	start();
}

function start() {
	log.info('Beginning server startup')
	var startupBegin = process.hrtime();
	var p, startupEnd;
	if (argv.watch) {
		p = run('nodemon app.js')
	} else {
		p = run('node app.js');
	}

	p.stdout.on('data', function onServerData(data) {
		if (data == 'event: SERVER_STARTED') {
			startupEnd = process.hrtime(startupBegin);
			log.info('Server startup completed in ' + prettyHrtime(startupEnd))
		}
	});

	if (argv.keepAlive) {
		p.on('exit', function cleanup() {
			if (startupEnd) {
				log.warn('The server unexpectedly crashed: restarting');
				setTimeout(start, KEEPALIVE_DELAY)
			}
		})
	}
}

function runSync(cmd, where){
	return spawnSync('sh', ['-c', cmd], {
		env   : process.env,
		cwd   : where ? __dirname + '/' + where : __dirname,
		stdio : 'inherit',
	})
}

function run(cmd, where){

	var p = spawn('sh', ['-c', cmd], {
		env   : process.env,
		cwd   : where ? __dirname + '/' + where : __dirname,
		stdio : 'pipe',
	})

	p.stdout.on('data', function (data) {
		// This is our own hacky way to send events upstream.
		if (data.indexOf('event:') !==  0) {
			process.stdout.write(data);
		}
	});

	// Is this necessary?  What is on this channel?
	p.stderr.on('data', function (data) {
		process.stderr.write(data);
	});
	return p;
}



